// Code generated by Prisma (prisma@1.19.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  respondent: (where?: RespondentWhereInput) => Promise<boolean>;
  show: (where?: ShowWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  respondent: (where: RespondentWhereUniqueInput) => Respondent;
  respondents: (
    args?: {
      where?: RespondentWhereInput;
      orderBy?: RespondentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<RespondentNode>;
  respondentsConnection: (
    args?: {
      where?: RespondentWhereInput;
      orderBy?: RespondentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RespondentConnection;
  show: (where: ShowWhereUniqueInput) => Show;
  shows: (
    args?: {
      where?: ShowWhereInput;
      orderBy?: ShowOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ShowNode>;
  showsConnection: (
    args?: {
      where?: ShowWhereInput;
      orderBy?: ShowOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ShowConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createRespondent: (data: RespondentCreateInput) => Respondent;
  updateRespondent: (
    args: { data: RespondentUpdateInput; where: RespondentWhereUniqueInput }
  ) => Respondent;
  updateManyRespondents: (
    args: { data: RespondentUpdateInput; where?: RespondentWhereInput }
  ) => BatchPayload;
  upsertRespondent: (
    args: {
      where: RespondentWhereUniqueInput;
      create: RespondentCreateInput;
      update: RespondentUpdateInput;
    }
  ) => Respondent;
  deleteRespondent: (where: RespondentWhereUniqueInput) => Respondent;
  deleteManyRespondents: (where?: RespondentWhereInput) => BatchPayload;
  createShow: (data: ShowCreateInput) => Show;
  updateShow: (
    args: { data: ShowUpdateInput; where: ShowWhereUniqueInput }
  ) => Show;
  updateManyShows: (
    args: { data: ShowUpdateInput; where?: ShowWhereInput }
  ) => BatchPayload;
  upsertShow: (
    args: {
      where: ShowWhereUniqueInput;
      create: ShowCreateInput;
      update: ShowUpdateInput;
    }
  ) => Show;
  deleteShow: (where: ShowWhereUniqueInput) => Show;
  deleteManyShows: (where?: ShowWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  respondent: (
    where?: RespondentSubscriptionWhereInput
  ) => RespondentSubscriptionPayloadSubscription;
  show: (
    where?: ShowSubscriptionWhereInput
  ) => ShowSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RespondentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "anonymousName_ASC"
  | "anonymousName_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ShowOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "name_ASC"
  | "name_DESC"
  | "isPrivate_ASC"
  | "isPrivate_DESC"
  | "isReadOnly_ASC"
  | "isReadOnly_DESC"
  | "areResponsesHidden_ASC"
  | "areResponsesHidden_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "interval_ASC"
  | "interval_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "uid_ASC"
  | "uid_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "isPremium_ASC"
  | "isPremium_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export type RespondentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ShowUpdateInput {
  slug?: String;
  name?: String;
  isPrivate?: Boolean;
  isReadOnly?: Boolean;
  areResponsesHidden?: Boolean;
  dates?: ShowUpdatedatesInput;
  startTime?: DateTimeInput;
  endTime?: DateTimeInput;
  interval?: Int;
  respondents?: RespondentUpdateManyInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface RespondentCreateManyInput {
  create?: RespondentCreateInput[] | RespondentCreateInput;
  connect?: RespondentWhereUniqueInput[] | RespondentWhereUniqueInput;
}

export interface RespondentUpdateInput {
  anonymousName?: String;
  user?: UserUpdateOneInput;
  role?: String;
  response?: RespondentUpdateresponseInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  uid?: String;
  email?: String;
}>;

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ShowCreatedatesInput {
  set?: DateTimeInput[] | DateTimeInput;
}

export interface RespondentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RespondentWhereInput;
  AND?: RespondentSubscriptionWhereInput[] | RespondentSubscriptionWhereInput;
  OR?: RespondentSubscriptionWhereInput[] | RespondentSubscriptionWhereInput;
  NOT?: RespondentSubscriptionWhereInput[] | RespondentSubscriptionWhereInput;
}

export interface ShowCreateInput {
  slug: String;
  name: String;
  isPrivate?: Boolean;
  isReadOnly?: Boolean;
  areResponsesHidden?: Boolean;
  dates?: ShowCreatedatesInput;
  startTime: DateTimeInput;
  endTime: DateTimeInput;
  interval: Int;
  respondents?: RespondentCreateManyInput;
}

export interface RespondentUpsertWithWhereUniqueNestedInput {
  where: RespondentWhereUniqueInput;
  update: RespondentUpdateDataInput;
  create: RespondentCreateInput;
}

export interface RespondentUpdateresponseInput {
  set?: DateTimeInput[] | DateTimeInput;
}

export type ShowWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  slug?: String;
}>;

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ShowWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  isPrivate?: Boolean;
  isPrivate_not?: Boolean;
  isReadOnly?: Boolean;
  isReadOnly_not?: Boolean;
  areResponsesHidden?: Boolean;
  areResponsesHidden_not?: Boolean;
  startTime?: DateTimeInput;
  startTime_not?: DateTimeInput;
  startTime_in?: DateTimeInput[] | DateTimeInput;
  startTime_not_in?: DateTimeInput[] | DateTimeInput;
  startTime_lt?: DateTimeInput;
  startTime_lte?: DateTimeInput;
  startTime_gt?: DateTimeInput;
  startTime_gte?: DateTimeInput;
  endTime?: DateTimeInput;
  endTime_not?: DateTimeInput;
  endTime_in?: DateTimeInput[] | DateTimeInput;
  endTime_not_in?: DateTimeInput[] | DateTimeInput;
  endTime_lt?: DateTimeInput;
  endTime_lte?: DateTimeInput;
  endTime_gt?: DateTimeInput;
  endTime_gte?: DateTimeInput;
  interval?: Int;
  interval_not?: Int;
  interval_in?: Int[] | Int;
  interval_not_in?: Int[] | Int;
  interval_lt?: Int;
  interval_lte?: Int;
  interval_gt?: Int;
  interval_gte?: Int;
  respondents_every?: RespondentWhereInput;
  respondents_some?: RespondentWhereInput;
  respondents_none?: RespondentWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ShowWhereInput[] | ShowWhereInput;
  OR?: ShowWhereInput[] | ShowWhereInput;
  NOT?: ShowWhereInput[] | ShowWhereInput;
}

export interface ShowUpdatedatesInput {
  set?: DateTimeInput[] | DateTimeInput;
}

export interface ShowSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ShowWhereInput;
  AND?: ShowSubscriptionWhereInput[] | ShowSubscriptionWhereInput;
  OR?: ShowSubscriptionWhereInput[] | ShowSubscriptionWhereInput;
  NOT?: ShowSubscriptionWhereInput[] | ShowSubscriptionWhereInput;
}

export interface RespondentCreateInput {
  anonymousName?: String;
  user?: UserCreateOneInput;
  role?: String;
  response?: RespondentCreateresponseInput;
}

export interface RespondentUpdateDataInput {
  anonymousName?: String;
  user?: UserUpdateOneInput;
  role?: String;
  response?: RespondentUpdateresponseInput;
}

export interface RespondentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  anonymousName?: String;
  anonymousName_not?: String;
  anonymousName_in?: String[] | String;
  anonymousName_not_in?: String[] | String;
  anonymousName_lt?: String;
  anonymousName_lte?: String;
  anonymousName_gt?: String;
  anonymousName_gte?: String;
  anonymousName_contains?: String;
  anonymousName_not_contains?: String;
  anonymousName_starts_with?: String;
  anonymousName_not_starts_with?: String;
  anonymousName_ends_with?: String;
  anonymousName_not_ends_with?: String;
  user?: UserWhereInput;
  role?: String;
  role_not?: String;
  role_in?: String[] | String;
  role_not_in?: String[] | String;
  role_lt?: String;
  role_lte?: String;
  role_gt?: String;
  role_gte?: String;
  role_contains?: String;
  role_not_contains?: String;
  role_starts_with?: String;
  role_not_starts_with?: String;
  role_ends_with?: String;
  role_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: RespondentWhereInput[] | RespondentWhereInput;
  OR?: RespondentWhereInput[] | RespondentWhereInput;
  NOT?: RespondentWhereInput[] | RespondentWhereInput;
}

export interface RespondentCreateresponseInput {
  set?: DateTimeInput[] | DateTimeInput;
}

export interface UserCreateInput {
  uid?: String;
  email: String;
  name?: String;
  isPremium?: Boolean;
}

export interface UserUpdateDataInput {
  uid?: String;
  email?: String;
  name?: String;
  isPremium?: Boolean;
}

export interface RespondentUpdateWithWhereUniqueNestedInput {
  where: RespondentWhereUniqueInput;
  data: RespondentUpdateDataInput;
}

export interface UserUpdateInput {
  uid?: String;
  email?: String;
  name?: String;
  isPremium?: Boolean;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  uid?: String;
  uid_not?: String;
  uid_in?: String[] | String;
  uid_not_in?: String[] | String;
  uid_lt?: String;
  uid_lte?: String;
  uid_gt?: String;
  uid_gte?: String;
  uid_contains?: String;
  uid_not_contains?: String;
  uid_starts_with?: String;
  uid_not_starts_with?: String;
  uid_ends_with?: String;
  uid_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  isPremium?: Boolean;
  isPremium_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface RespondentUpdateManyInput {
  create?: RespondentCreateInput[] | RespondentCreateInput;
  update?:
    | RespondentUpdateWithWhereUniqueNestedInput[]
    | RespondentUpdateWithWhereUniqueNestedInput;
  upsert?:
    | RespondentUpsertWithWhereUniqueNestedInput[]
    | RespondentUpsertWithWhereUniqueNestedInput;
  delete?: RespondentWhereUniqueInput[] | RespondentWhereUniqueInput;
  connect?: RespondentWhereUniqueInput[] | RespondentWhereUniqueInput;
  disconnect?: RespondentWhereUniqueInput[] | RespondentWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  uid?: String;
  email: String;
  name?: String;
  isPremium: Boolean;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  uid: () => Promise<String>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  isPremium: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uid: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  isPremium: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNode {
  id: ID_Output;
  uid?: String;
  email: String;
  name?: String;
  isPremium: Boolean;
  createdAt: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  uid: () => Promise<String>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  isPremium: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uid: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  isPremium: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ShowSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ShowSubscriptionPayload
  extends Promise<ShowSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Show>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShowPreviousValues>() => T;
}

export interface ShowSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShowSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShowSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShowPreviousValuesSubscription>() => T;
}

export interface ShowNode {
  id: ID_Output;
  slug: String;
  name: String;
  isPrivate: Boolean;
  isReadOnly: Boolean;
  areResponsesHidden: Boolean;
  dates: DateTimeOutput[];
  startTime: DateTimeOutput;
  endTime: DateTimeOutput;
  interval: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Show extends Promise<ShowNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  slug: () => Promise<String>;
  name: () => Promise<String>;
  isPrivate: () => Promise<Boolean>;
  isReadOnly: () => Promise<Boolean>;
  areResponsesHidden: () => Promise<Boolean>;
  dates: () => Promise<DateTimeOutput[]>;
  startTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
  interval: () => Promise<Int>;
  respondents: <T = FragmentableArray<RespondentNode>>(
    args?: {
      where?: RespondentWhereInput;
      orderBy?: RespondentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ShowSubscription
  extends Promise<AsyncIterator<ShowNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slug: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
  isReadOnly: () => Promise<AsyncIterator<Boolean>>;
  areResponsesHidden: () => Promise<AsyncIterator<Boolean>>;
  dates: () => Promise<AsyncIterator<DateTimeOutput[]>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  interval: () => Promise<AsyncIterator<Int>>;
  respondents: <T = Promise<AsyncIterator<RespondentSubscription>>>(
    args?: {
      where?: RespondentWhereInput;
      orderBy?: RespondentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateRespondentNode {
  count: Int;
}

export interface AggregateRespondent
  extends Promise<AggregateRespondentNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRespondentSubscription
  extends Promise<AsyncIterator<AggregateRespondentNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface RespondentEdgeNode {
  cursor: String;
}

export interface RespondentEdge
  extends Promise<RespondentEdgeNode>,
    Fragmentable {
  node: <T = Respondent>() => T;
  cursor: () => Promise<String>;
}

export interface RespondentEdgeSubscription
  extends Promise<AsyncIterator<RespondentEdgeNode>>,
    Fragmentable {
  node: <T = RespondentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateShowNode {
  count: Int;
}

export interface AggregateShow
  extends Promise<AggregateShowNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShowSubscription
  extends Promise<AsyncIterator<AggregateShowNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShowConnectionNode {}

export interface ShowConnection
  extends Promise<ShowConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ShowEdgeNode>>() => T;
  aggregate: <T = AggregateShow>() => T;
}

export interface ShowConnectionSubscription
  extends Promise<AsyncIterator<ShowConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShowEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShowSubscription>() => T;
}

export interface RespondentPreviousValuesNode {
  id: ID_Output;
  anonymousName?: String;
  role: String;
  response: DateTimeOutput[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RespondentPreviousValues
  extends Promise<RespondentPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  anonymousName: () => Promise<String>;
  role: () => Promise<String>;
  response: () => Promise<DateTimeOutput[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RespondentPreviousValuesSubscription
  extends Promise<AsyncIterator<RespondentPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  anonymousName: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  response: () => Promise<AsyncIterator<DateTimeOutput[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RespondentSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RespondentSubscriptionPayload
  extends Promise<RespondentSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Respondent>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RespondentPreviousValues>() => T;
}

export interface RespondentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RespondentSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RespondentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RespondentPreviousValuesSubscription>() => T;
}

export interface RespondentNode {
  id: ID_Output;
  anonymousName?: String;
  role: String;
  response: DateTimeOutput[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Respondent extends Promise<RespondentNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  anonymousName: () => Promise<String>;
  user: <T = User>() => T;
  role: () => Promise<String>;
  response: () => Promise<DateTimeOutput[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RespondentSubscription
  extends Promise<AsyncIterator<RespondentNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  anonymousName: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  role: () => Promise<AsyncIterator<String>>;
  response: () => Promise<AsyncIterator<DateTimeOutput[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RespondentConnectionNode {}

export interface RespondentConnection
  extends Promise<RespondentConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<RespondentEdgeNode>>() => T;
  aggregate: <T = AggregateRespondent>() => T;
}

export interface RespondentConnectionSubscription
  extends Promise<AsyncIterator<RespondentConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RespondentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRespondentSubscription>() => T;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ShowEdgeNode {
  cursor: String;
}

export interface ShowEdge extends Promise<ShowEdgeNode>, Fragmentable {
  node: <T = Show>() => T;
  cursor: () => Promise<String>;
}

export interface ShowEdgeSubscription
  extends Promise<AsyncIterator<ShowEdgeNode>>,
    Fragmentable {
  node: <T = ShowSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ShowPreviousValuesNode {
  id: ID_Output;
  slug: String;
  name: String;
  isPrivate: Boolean;
  isReadOnly: Boolean;
  areResponsesHidden: Boolean;
  dates: DateTimeOutput[];
  startTime: DateTimeOutput;
  endTime: DateTimeOutput;
  interval: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ShowPreviousValues
  extends Promise<ShowPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  slug: () => Promise<String>;
  name: () => Promise<String>;
  isPrivate: () => Promise<Boolean>;
  isReadOnly: () => Promise<Boolean>;
  areResponsesHidden: () => Promise<Boolean>;
  dates: () => Promise<DateTimeOutput[]>;
  startTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
  interval: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ShowPreviousValuesSubscription
  extends Promise<AsyncIterator<ShowPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slug: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
  isReadOnly: () => Promise<AsyncIterator<Boolean>>;
  areResponsesHidden: () => Promise<AsyncIterator<Boolean>>;
  dates: () => Promise<AsyncIterator<DateTimeOutput[]>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  interval: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Type Defs
 */

export const prisma: Prisma;
