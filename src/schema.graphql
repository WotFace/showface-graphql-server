scalar DateTime

type Query { 
  user(auth: AuthInput!): User #
  show(auth: AuthInput, where: ShowQueryInput!): Show #
  userShows(auth: AuthInput!, first: Int, skip: Int): [Show!] #
}

type Mutation {
  createUser(auth: AuthInput!, data: CreateUserInput!): User #
  editUserSettings(auth: AuthInput!, data: EditUserSettingsInput!): User #
  createNewShow(auth: AuthInput, data: CreateNewShowInput!): Show #
  editShowSettings(auth: AuthInput, where: EditShowSettingsWhereInput!, data: EditShowSettingsInput!): Show #
  deleteShow(auth: AuthInput!, where: DeleteShowInput!): Result! #
  editShowRespondentStatus(auth: AuthInput!, where: EditShowRespondentStatusWhereInput!, data: EditShowRespondentStatusInput!): Show #
  addRespondentsByEmail(auth: AuthInput!, where: AddRespondentsByEmailWhereInput!, data: [AddRespondentsByEmailInput!]!): Show #
  deleteRespondents(auth: AuthInput!, where: DeleteRespondentsWhereInput!): Show #
  createNewResponse(auth: AuthInput, where: CreateNewResponseWhereInput!, data: CreateNewResponseInput!): Show #
  editResponse(auth: AuthInput, where: EditResponseWhereInput!, data: EditResponseInput!): Show #
  deleteResponse(auth: AuthInput, where: DeleteResponseWhereInput!): Show #
}

type Subscription {
  show(auth: AuthInput, where: ShowSubscriptionWhereInput!): Show!
}

input ShowSubscriptionWhereInput {
  slug: String!
}


input ShowQueryInput {
  slug: String!
}

input EditShowRespondentStatusWhereInput {
  slug: String!
  id: String!
}

input EditShowRespondentStatusInput {
  role: String!
}

input EditShowSettingsWhereInput {
  slug: String!
}

input EditUserSettingsInput {
  name: String
  isPremium: Boolean
}

input CreateUserInput {
  email: String!
  name: String!
}

input DeleteRespondentsWhereInput {
  slug: String!
  id: [String!]!
}

input AddRespondentsByEmailWhereInput {
  slug: String!
}

input AddRespondentsByEmailInput {
  email: String!
  role: String!
}

input CreateNewResponseInput {
  name: String
  response: [DateTime!]
}

input CreateNewResponseWhereInput {
  slug: String!
}

input EditResponseWhereInput {
  slug: String!
  id: String!
}

input EditResponseInput {
  response: [DateTime!]
}

input DeleteResponseWhereInput {
  slug: String!
  id: String!
}

input AuthInput {
  token: String!
  uid: String!
}

input CreateNewShowInput {
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  interval: Int!
}

input EditShowSettingsInput {
  name: String
  isPrivate: Boolean
  isAnonymous: Boolean
  isReadOnly: Boolean
  startDate: DateTime
  endDate: DateTime
  interval: Int
}

input DeleteShowInput {
  slug: String!
}

type Result {
  status: Int!
  message: String!
}

type User {
  id: ID
  uid: String
  email: String
  name: String
  isPremium: Boolean
  createdAt: DateTime
}

type Show {
  id: ID
  slug: String
  name: String
  isPrivate: Boolean
  isAnonymous: Boolean
  isReadOnly: Boolean
  isCreatedAnonymously: Boolean
  startDate: DateTime
  endDate: DateTime
  interval: Int
  respondents: [Respondent!]
  createdAt: DateTime
}

type Respondent {
  id: ID
  anonymousName: String
  user: User
  role: String
  response: [DateTime!]
  createdAt: DateTime
  updatedAt: DateTime
}
